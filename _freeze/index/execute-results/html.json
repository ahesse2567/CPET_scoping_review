{
  "hash": "0b2f776dfec47f73b65f3f0af930ff52",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Popularity And Prevalence Of Gas Exchange Data Processing Methods In Peer-reviewed Literature: A Scoping Review\"\n\n# Hiding author and affiliation info per IJSM instructions.\n\n# author:\n#   - name: Anton Hesse\n#     orcid: 0000-0001-8456-7343\n#     corresponding: true\n#     email: hesse151@umn.edu, ahesse2567@gmail.com\n#     roles:\n#       - Investigation\n#       - Software\n#       - Visualization\n#       - Writing – Original Draft Preparation\n#     affiliations:\n#       - University of Minnesota-Twin Cities\n#   - name: Christopher Lundstrom\n#     orcid: 0000-0002-1527-1685\n#     corresponding: false\n#     roles: \n#       - Supervision\n#       - Writing – Review & Editing\n#     affiliations:\n#       - University of Minnesota-Twin Cities\nabstract: |\n  Cardiopulmonary exercise testing involves collecting variable breath-by-breath data, sometimes requiring data processing of outlier removal, interpolation, and averaging before later analysis. These data processing choices, such as averaging duration, are known to affect calculated values such as VO2max. However, assessing the effects of data processing without knowing popular methods worth comparing is difficult. In addition, such details aid study reproduction. We conducted a scoping review and identified peer-reviewed articles with exercise testing that collected data breath-by-breath from Ovid-MEDLINE, Scopus, and Web of Science databases. We screened articles and extracted data processing methods manually, using machine learning, and with regular expressions. Of the 8,351 articles, 376 (4.5 ± 0.4%) and 581 (7.0 ± 0.5%) described outlier removal and interpolation, respectively. An estimated 66.8 ± 2.8% reported averaging methods (n = 1078). Commonly documented outlier cutoffs were ± 3 or 4 SD (39.1% and 51.6%, respectively). The dominating interpolation duration and procedure were one second (93.9%) and linear interpolation (92.5%). Averaging methods commonly described were 30 (30.9%), 60 (12.4%), 15 (11.6%), 10 (11.0%), and 20 (8.1%) second bin averages. This shows that studies collecting breath-by-breath data often lack detailed descriptions of data processing methods, particularly for outlier removal and interpolation. While averaging methods are more commonly reported, improved documentation across all processing methods will enhance reproducibility and facilitate future research comparing data processing choices.\nkeywords:\n  - Data Averaging\n  - Outlier Removal\n  - Interpolation\n# author-note:\n#   disclosures:\n#     conflict of interest: \"The author has no conflict of interest to declare.\"\ndate: last-modified\nbibliography: references.bib\ncitation:\n  container-title: \"JOURNAL GOES HERE\"\nnumber-sections: true\n---\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(janitor)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n\nAttaching package: 'janitor'\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(knitr)\nlibrary(flextable)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n\nAttaching package: 'flextable'\n\nThe following object is masked from 'package:purrr':\n\n    compose\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n# library(kableExtra)\nextrafont::loadfonts(quiet = TRUE)\nlibrary(here)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nhere() starts at /Users/antonhesse/Desktop/Anton/Education/UMN/PhD/Dissertation/CPET_scoping_review\n```\n\n\n:::\n:::\n\n\n\n\n\n# Introduction\n\nClinicians and researchers commonly use cardiopulmonary exercise testing (CPET) to determine maximal aerobic capacity (VO~2~max), ventilatory thresholds, and VO~2~ kinetics.\nSuch values help categorize fitness, predict disease risk, and guide exercise [@pescatello2014, p. 162].\nUsing CPET results to guide exercise, especially relative to thresholds, produces better improvements due to more consistent and predictable metabolic responses [@jamnick2020].\nTherefore, incorrectly calculating or identifying these values limits CPET benefits.\n\nCalculating the above values often requires data processing when CPET data is collected breath-by-breath (BBB) as it is highly variable [@robergs2010].\nCPET data processing usually involves outlier removal, optional interpolation to regular intervals, and averaging to more accurately reflect whole-body metabolism [@robergs2010].\nPrevious research has shown that data averaging influences CPET values.\nAveraging over longer durations reduces VO~2~max and VO~2~ plateau detection [@sousa2010; @johnson1998; @sell2021; @midgley2007; @astorino2009; @astorino2000; @sousa2010; @martin-rincon2019; @martin-rincon2020; @scheadler2017; @dejesus2014; @hill2003; @smart2015; @matthews1987; @robergs2003; @robergs2010].\nWe are unaware of research on the effects of data processing and locating ventilatory thresholds.\n\nMany studies remove outliers by finding points ±3 or ±4 standard deviations (SD) beyond the local mean (i.e., a prediction interval).\nThese cutoffs are common because the relatively small sample size of BBB gas exchange data often contains more values beyond 3 or 4 SD than one would predict from an assumed Gaussian distribution [@lamarra1987].\nMore outliers appear than expected because of both conscious and unconscious alterations of breathing patterns, including swallowing and coughing [@lamarra1987].\nWe are unaware of prior research that examines how different outlier removal strategies affect VO~2~max, ventilatory thresholds, and VO~2~ kinetics.\n\nInterpolation, often to one-second intervals, is common in VO~2~ kinetics research to \"ensemble\" average repeated transitions to minimize variability [@keir2014; @lamarra1987].\nAlthough this does not affect parameter estimates, one-second interpolation has been criticized for artificially narrowing confidence intervals [@benson2017; @francescato2014; @francescato2019; @francescato2015].\nAs before, we are unaware of research specifically investigating how interpolation affects VO~2~max and ventilatory threshold identification.\n\nData processing choices, such as averaging and interpolation, impact CPET variables or their confidence intervals.\nExisting surveys [@robergs2010] and studies [@midgley2007] are small and focused on averaging methods only, finding time-based bin averages (e.g., 30-second averages) were popular.\nA larger sample can, therefore, better describe how often all data processing steps are described.\n\nBefore conducting this scoping review, we anecdotally observed that many articles using CPET data did not report all data processing steps, especially outlier removal and interpolation details.\nThis may hamper reproduction or replication attempts, which have become a more prominent issue in science within the past decade [@goodman2016; @opensciencecollaboration2015] Therefore, to assist with conducting future research on the effects of data processing on CPET values and to evaluate the methodological reproducibility of research using BBB gas exchange data generally, we conducted a broad scoping review to identify the frequency of reporting, and popularity of outlier removal, interpolation, and data averaging methods.\n\n# Methods {#sec-methods}\n\n## Design\n\nThis scoping review surveyed gas exchange data processing choices in original, peer-reviewed studies, summarizing the reporting frequency and methods for outlier removal, interpolation, and averaging.\n\n## Protocol Registration\n\nThese methods [@tricco2018] and results [@peters2020] are modeled on the PRISMA scoping review extension guidelines. This protocol was registered with the Open Science Framework (OSF): <https://doi.org/10.17605/OSF.IO/A4VMZ>.\n\n## Eligibility Criteria\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nsource(here(\"code/cpet_articles/analysis/reporting/selection_sources_evidence.R\"))\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat <- vroom(...)\n  problems(dat)\n```\n\n\n:::\n:::\n\n\n\n\n\nEligible articles were peer-reviewed, with BBB gas exchange data, human participants, in English, with a DOI. We imposed no date restriction.\n\n## Information Sources and Search\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nmanual_downloads <- read_csv(\n    here::here(\"data/cpet_articles/Manual Downloads - Articles.csv\"),\n    show_col_types = FALSE)\n\nn_unsubscribed <- manual_downloads %>% \n    count(subscribed) %>% \n    filter(subscribed == FALSE) %>% \n    select(n) %>% \n    pull()\n```\n:::\n\n\n\n\n\nWe acquired data from the Ovid-MEDLINE, Scopus, and Web of Science databases with the guidance of a university librarian.\nThe electronic search strategy for the Ovid-MEDLINE database can be found at this link: <https://osf.io/a4vmz/files/osfstorage/6255791f28f9400531a24c96>.\n\nOur search output comprised article identifiers like DOIs.\nTo find missing DOIs, we employed the PubMed Central ID Converter API [@ncbi2021] using Python. Full texts were accessed via publisher text and data mining APIs using Python, [unpaywall.org](https://unpaywall.org/) using the unpywall Python package, through custom-built web-scraping scripts, or manually.\nOur library subscription did not permit access to1,549 articles.\n\n## Selection of Sources of Evidence\n\nThis study used a single screening process because it differs from most scoping reviews.\nIt only requires an exercise test with BBB gas exchange data collection rather than a more complex assessment of the overall methodology and intervention.\n\n### Text Analysis and Screening\n\nDespite database search filters, we screened additional non-English, non-human, and non-original articles such as reviews, meta-analyses, and protocol registrations, in addition to case studies.\nWe manually analyzed a subset of articles to help build machine learning (ML) classifiers and construct RegExs described below.\nThese ML classifiers and RegExs helped identify ineligible articles.\nThis computerized screening required converting full-text PDF and EPUB documents into plain text files.\nPlain text files were normalized by transforming text to lowercase, removing hyphenations and extra whitespace, and correcting some plain text conversion-induced errors.\n\nFollowing the normalization, we identified and removed articles that failed to correctly convert into text format, spotted non-English articles using the fasttext Python module [@bojanowski2016] and employed a random forest classifier from the sklearn Python package [@pedregosa2011] to detect ineligible articles based on our criteria.\nWe manually reviewed potentially ineligible articles flagged by the ML classifier.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nineligible_articles <- read_csv(\n    \"data/cpet_articles/text_analysis/eligibility/ineligible_articles_combined.csv\",\n    show_col_types = FALSE)\n\nbbb_articles <- read_csv(\n    \"data/cpet_articles/text_analysis/all_bbb_articles.csv\",\n    show_col_types = FALSE) %>% \n    distinct(doi_suffix, .keep_all = TRUE) %>% \n    filter(!(doi_suffix %in% ineligible_articles$doi_suffix))\n\nn_bbb_articles <- nrow(bbb_articles)\n```\n:::\n\n\n\n\n\nNext, we identified BBB articles using RegExs.\nArticles were considered BBB articles if their text contained variations of the phrase \"breath-by-breath\", or if their text included the make or model of a known BBB analyzer.\nBreath-by-breath brands and analyzers we included were Oxycon and Carefusion brands, Medgraphics Ultima, CPX, CCM, and CardiO~2~ models, Sensormedics Encore and 2900 models, Cosmed quark, k4, and k5 models, and the Minato RM-200, AE-280S, AE-300S, and AE-310S models.\nIn total, we identified 8,417 articles.\n\nWithin this subset, we performed a similar RegEx search for studies that documented using Douglas Bags or mixing chambers and excluded those articles.\nThe full details are described in the \"data charting process\" section.\n\n### Data Charting Process\n\nRegExs identified the presence of short phrases likely indicating that the authors described these methodological details.\nIf present, we extracted a \"snippet\" of text surrounding those phrases for later manual analysis by obtaining approximately 200 surrounding characters.\nWe then recorded the methods from these snippets.\nIn all cases, methods were only considered documented if the snippets provided at least some specific information.\nFor example, articles stating outlying breaths were removed but without describing the outlier criteria were considered \"not described.\" Finally, we read the full-text article to accurately document the data when snippets were ambiguous.\n\nThe data charting subsections below provide text extraction examples.\nExtracted texts were normalized to lowercase, with end-of-line hyphenation and unnecessary white space removed before capitalizing certain keywords for readability.\nTherefore, formatting varies and may include unconventional spacing and Unicode characters.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nz <- qnorm(0.025, lower.tail = FALSE)\nmargin_of_error <- 0.03\np <- 0.5\n\nn_articles <- ceiling(((margin_of_error / z)^2)^-1 * (p * (1 - p)))\n\nn_rounded_up_nearest_hundred <- round(n_articles, -2)\n```\n:::\n\n\n\n\n\nWe analyzed all eligible BBB articles for outlier and interpolation methods because fewer articles described these methods (\\~5%) and the phrases were more distinct.\nIn contrast, we analyzed a random subset of articles to document data averaging methods because far more articles described their averaging methods.\nEarly estimates as we developed our RegExs were that \\~60% or 5,050 articles had some averaging details.\nFurthermore, the phrases associated with averaging methods are more generic and often refer to other study aspects, such as heart rate averaging periods.\nGiven the large number of articles, we needed a minimum sample size of 1,068 based on a 95% confidence interval and a maximum margin of error of ±3%, assuming a proportion of 0.5.\nHowever, we raised this to 1,100 in anticipation of finding ineligible articles that eluded our previous text screening.\n\n#### Outliers\n\nOur outlier RegExs identified phrases like \"swallowing\", \"coughing\", \"errant\", \"aberrant\", and references to the \"local mean,\" \"prediction interval,\" or a specific standard deviation limit such as ±3 or ±4.\nFor example, our RegExs found \" errant\"; \" local mean\"; and \"breath-by-breath ̇vo2 data from each step transition were initially edited to exclude errant breaths by removing values lying more than 4 sd\" from @breese2019.\nWe gathered snippets surrounding those phrases and combined them when overlapping, thus producing\n\n> > y\\[hb+mb\\] data (quaresima & ferrari, 2009).\n> > expressed as 2.5 data analysis and kinetic modelling the breath-by-breath ̇vo2 data from each step transition were initially edited to exclude errant breaths by removing values lying more than 4 sd from the local mean determined using a five-breath rolling\\\\n\\\\x0c1932 breese et al. and deoxy\\[hb+mb\\] responses were subavera\n\nWe recorded the outlier limit as ±4 SD and the outlier function as a rolling 5-breath whole mean average.\n\n#### Interpolation\n\nNearly all articles describing interpolation methods used variations of \"interpolate.\" The remaining phrases were infrequent and inconsistent enough that interpolation methods were only described for those articles when discovered by chance.\nTo illustrate interpolation documentation, our RegExs extracted the snippet from @hartman2018.\n\n> > the v̇ o2 data from gd and gl exercise bouts were modeled to characterize the oxygen uptake kinetics following the methods described by bell et al. (2001).\n> > breath-by-breath v̇ o2 data were linearly INTERPOLATed to provide second-by-second values.\n> > phase 1 data (i.e. the cardiodynamic component), from the first ∼20 s of exercise, were omitted from the kinetics analysis because phase 1 is not directly repres\n\nWe documented the interpolation type as \"linear\" and the interpolation time as one second.\n\n#### Averaging\n\n<!-- ![Flowchart depicting the four major components of averaging method documentation.](graphics/Averaging Method Documentation300.jph){#fig-avg_methods_flowchart} -->\n\nWe document averaging methods according to five criteria: type/units, subtype/calculation, amount, measure of center, and mean type (Figure 1).\nType/units refer to the averaging units of time, breath, and digital filters.\nSubtype/calculation involves specific computations like bin and rolling averages or digital filter forms.\nThe amount is the unit quantity.\nFor example, 30 for a time average is 30 seconds but is 30 breaths for a breath average.\nMeasure of center distinguishes between mean or median, and mean type delineates whole vs. trimmed mean.\nTrimmed (truncated) means exclude a number of the highest and lowest values in the quantity before averaging the remaining data.\n\nDescriptions of averaging methods are also considerably more diverse and generic than outlier and interpolation descriptions.\nFor example, \"30-second averages\" and \"averaged every 30 seconds\" invite complexity, leading to more snippets referring to averaging something besides BBB gas exchange data.\nGiven that, we required that the text snippets include a reference to gas data such as the text \"O~2~,\" \"breath,\" \"gas,\" \"ventilation,\" etc.\n\nIn contrast to previous studies, we also documented every averaging method we found per paper instead of only describing the averaging method for VO~2~max.\nWe also recorded multiple averaging methods when the authors described the sampling interval and the transformation applied to it.\nFor example, the snippet from @hassinen2008\n\n> > ath method using the vmax respiratory gas analyzer (sensormedics, yorba linda, ca).\n> > vo2max was deﬁned as the mean of the three highest values of the averaged oxygen consumption measured consecutively OVER 20-S intervals.\n> > a total of 98% of the subjects achieved the respiratory exchange ratio of ⱖ1.1.\n> > electrocardiography was recorded throughout the exercise test using cardiosoft software (ge medical systems,\n\nstates that oxygen consumption was measured every 20 seconds and that VO~2~max was calculated as the average of three 20-second intervals, or 60-seconds.\nFor this article, we documented one averaging method as a 20-second time bin whole mean and another as a 60-second time bin whole mean.\n\nIn many cases, authors did not explicitly use the terms \"average\" or \"mean\" to describe their averaging methods, but we documented their methods when implied.\nFor example, the snippet from @deboeck2004 reading\n\n> > red using a continuously monitored electrocardiograph.\n> > blood pressure was measured at the end of each workload increment using an automatic sphygmomanometer.\n> > peak v9o2 was deﬁned as the v9o2 measured DURING THE LAST 30 S of peak exercise.\n> > oxygen pulse was calculated by dividing v9o2 by cardiac frequency.\n> > the anaerobic threshold was detected using the v-slope method \\[16\\].\n> > the ventilatory equivalent for carbon dioxide w\n\nstates they calculated VO~2~peak using the last 30 seconds of exercise data.\nWe documented such phrasing as a 30-second time-bin whole mean average.\n\n### Data Items\n\nIn all cases, articles that did not return any phrases were documented as \"not described\" for their respective data processing category.\nIf snippets did not refer to the data processing category or if the snippet lacked sufficient information, those data processing variables were documented as \"not described.\" For example, interpolation variables were denoted as \"not described\" if interpolation was acknowledged but without details for the interpolation type or time.\n\n#### Outliers\n\nWe documented the outlier limit, for example, ±3 standard deviations, and any outlier function used to compute the outlier limit, if described.\n\n#### Interpolation\n\nWe recorded the interpolation type (linear, cubic, Lagrange, specifically *un*interpolated, and other) and time frame (e.g., every one second).\n\n#### Averaging\n\nWe noted the following averaging types: Time, breath, breath-time, time-breath, time-time, digital filter, ensemble, (explicitly) *un*averaged, and other.\nAveraging subtypes included bin, rolling, bin-roll, rolling-bin, Butterworth low-pass, Fast Fourier Transform (FFT), and Savitsky-Golay.\nNext, we recorded the time in seconds or the number of breaths.\nWe recorded the measure of center as mean or median.\nFinally, we noted if the mean was a whole or trimmed.\n\n### Synthesis of Results\n\nCounts, percentages, and margin of error (95% confidence) were calculated for the reporting frequency of each data processing method using R [@rcoreteam2021] and RStudio [@positteam2022].\n\n# Results {#sec-results}\n\n## Selection of Sources of Evidence\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\novid_records <- read_csv(here::here(\n    \"data/cpet_articles/database_search/ovid/doi_merged_ovid.csv\"),\n    show_col_types = FALSE) %>% \n    clean_names()\nscopus_records <- read_csv(here::here(\n    \"data/cpet_articles/database_search/scopus/scopus_records_tidy.csv\"),\n    show_col_types = FALSE) %>% \n    clean_names()\nwos_records <- read_csv(here::here(\n    \"data/cpet_articles/database_search/web_of_science/web_of_science_records_tidy.csv\"), show_col_types = FALSE) %>% \n    clean_names()\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat <- vroom(...)\n  problems(dat)\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nn_total_with_na <- bind_rows(ovid_records['doi'],\n                    scopus_records['doi'],\n                    wos_records['doi']) %>% \n    distinct() %>% \n    nrow()\n\nn_no_doi <- n_total_with_na - n_total_articles\nn_no_doi <- if_else(n_no_doi <= 10, \n        english::english(n_no_doi) %>% \n            as.character() %>% \n            str_to_lower(),\n        format(n_no_doi, big.mark = ',', scientific = FALSE))\n```\n:::\n\n\n\n\n\nFigure 2 shows the selection of sources of evidence flowchart. During our analysis, we identified 1,352 ineligible articles.\nWe cross-referenced those against the breath-by-breath articles and removed another 354, leading to 8,351 articles.\n\n## Characteristics and Results of Individual Sources of Evidence\n\nThe PRISMA Extension for Scoping Reviews checklist normally requires a section to report the characteristics and results of individual sources of evidence, usually in a table format, including citations [@tricco2018].\nGiven the vast nature of this scoping review, readers can instead view web links to our [outlier](https://docs.google.com/spreadsheets/d/1k_i4EP5U3zMltk8n21X-KHGoxUfR6XAJu6lxrVUufg0/edit?usp=sharing), [interpolation](https://docs.google.com/spreadsheets/d/1mNHwyNwVeQeAAm-Jx43ImR91sLyRLSvad9oglHQB83A/edit?usp=sharing), and [averaging](https://docs.google.com/spreadsheets/d/1KdmDZuI1FS1XUK5zJm3JIqf4tQiBd0C1pW0p0PFZweU/edit?usp=sharing) data charting spreadsheets.\n\n## Synthesis of Results\n\nWe present our results according to the reporting prevalence followed by the specific characteristics when reported.\n\n### Outliers\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nsource(\"code/cpet_articles/analysis/reporting/outlier_reporting.R\")\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n\nAttaching package: 'scales'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nThe following object is masked from 'package:purrr':\n\n    discard\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nThe following object is masked from 'package:readr':\n\n    col_factor\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat <- vroom(...)\n  problems(dat)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nSaving 7 x 5 in image\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nprop_3sd <- specified_outlier_cutoffs_by_type %>% \n    filter(outlier_limit == \"±3 SD / 99%\") %>% \n    select(prop) %>% \n    pull()\n\nprop_4sd <- specified_outlier_cutoffs_by_type %>% \n    filter(outlier_limit == \"±4 SD\") %>% \n    select(prop) %>% \n    pull()\n```\n:::\n\n\n\n\n\nOf the 8,351 articles, 376 (4.5 ± 0.4%) reported outlier removal methods.\nOf the articles reporting their outlier methods, the most prevalent methods were ±3 (39.1%) and ±4 (51.6%) standard deviations, respectively (Figure 3).\n\n\n\n\n\n::: {#cell-fig-specified-outlier-limits .cell}\n\n```{.r .cell-code .hidden}\nplot(prop_outlier_limits_plot)\n```\n\n::: {.cell-output-display}\n![Counts and percentages of outlier limits when specified.](index_files/figure-html/fig-specified-outlier-limits-1.png){#fig-specified-outlier-limits width=672}\n:::\n:::\n\n\n\n\n\nOnly 102 (1.2 ± 0.2%) articles reported details of the function they used to calculate their outlier limit.\nOf those, breath-based averages (n = 76, 74.5%) then time-based averages (n = 15, 14.7%) were the most common for calculating outlier boundaries.\nSpecifically, 5-breath averages (n = 54, 52.9%) were the most prevalent functions to calculate outlier limits.\n\n### Interpolation\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nsource(\"code/cpet_articles/analysis/reporting/interpolation_reporting.R\")\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nSaving 7 x 5 in image\n```\n\n\n:::\n:::\n\n\n\n\n\nWe found that 581 (7.0 ± 0.5%) out of 8,351 specified their interpolation methodology.\nWhen reported, the most common interpolation time was one second (n = 527, 93.9%).\nAlthough the majority of articles reporting interpolation procedures did not explicitly specify their interpolation method (n = 314, 54.0%), linear interpolation was the most popular stated method (n = 247, 92.5%) (see Table 1 and Figure 4).\n\n\n\n\n\n::: {#tbl-interpolation_time_type .cell layout-ncol=\"2\" tbl-cap='Most prevalent specified interpolation methods by type (a) and by time (b)'}\n\n```{.r .cell-code .hidden}\n# interpolation by type\ninterpolation_by_type_tib_formatted <- \n  interpolation_by_type_tib %>% \n    mutate(prop = round(prop * 100,1),\n           interpolation_type = str_to_title(interpolation_type)) %>% \n    rename(\"Interpolation Type\" = interpolation_type,\n           N = n,\n           \"%\" = prop) %>% \n    flextable::flextable()\n\n# interpolation by time\ninterp_by_time_formatted <- interpolation_by_time_tib %>% \n    mutate(interpolation_time_s = if_else(prop < 0.01, \"other\", interpolation_time_s),\n           interpolation_time_s = str_to_sentence(interpolation_time_s)) %>% \n    group_by(interpolation_time_s) %>% \n    summarize(n = sum(n)) %>% \n    ungroup() %>% \n    mutate(prop = round(prop.table(n) * 100, 1)) %>% \n    rename(\"Interpolation Time (s)\" = interpolation_time_s,\n           N = n,\n           \"%\" = prop) %>% \n    flextable::flextable()\n\nflextable::save_as_docx(\n  interpolation_by_type_tib_formatted,\n  interp_by_time_formatted,\n  path = here::here(\"graphics/interp_tables.docx\"))\n```\n:::\n\n::: {#cell-fig-interpolation_by-time-and_type .cell}\n\n```{.r .cell-code .hidden}\n# plot(condensed_interpolation_by_specified_procedure_plot)\n```\n:::\n\n\n\n\n\n### Averaging\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nsource(here::here(\"code/cpet_articles/analysis/reporting/avg_methods_reporting.R\"))\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`summarise()` has grouped output by 'avg_type', 'avg_subtype', 'avg_amount',\n'avg_mos'. You can override using the `.groups` argument.\nSaving 7 x 5 in image\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nmost_popular_avg_type <- avg_by_type_tab %>% \n    filter(n == max(n)) %>% \n    select(avg_type) %>% \n    pull()\n\nmost_popular_avg_type_prop <- avg_by_type_tab %>% \n    filter(n == max(n)) %>% \n    select(prop) %>% \n    pull()\n\nsecond_most_popular_avg_type <- avg_by_type_tab %>% \n    filter(n == sort(n)[length(n) - 1]) %>%\n    select(avg_type) %>% \n    pull()\n\nsecond_most_popular_avg_type_prop <- avg_by_type_tab %>% \n    filter(n == sort(n)[length(n) - 1]) %>% \n    select(prop) %>% \n    pull()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nmost_popular_avg_subtype <- avg_by_subtype_tab %>% \n    filter(n == max(n)) %>% \n    select(avg_subtype) %>% \n    pull()\n\nmost_popular_avg_subtype_prop <- avg_by_subtype_tab %>% \n    filter(n == max(n)) %>% \n    select(prop) %>% \n    pull()\n\nsecond_most_popular_avg_subtype <- avg_by_subtype_tab %>% \n    filter(n == sort(n)[length(n) - 1]) %>%\n    select(avg_subtype) %>% \n    pull()\n\nsecond_most_popular_avg_subtype_prop <- avg_by_subtype_tab %>% \n    filter(n == sort(n)[length(n) - 1]) %>% \n    select(prop) %>% \n    pull()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\ntop_three_type_subtype <- avg_by_type_subtype_tab %>% \n    slice_max(order_by = n, n = 3) %>% \n    select(avg_type_subtype) %>% \n    pull() %>% \n    str_to_lower()\n\ntop_three_type_subtype_props <- avg_by_type_subtype_tab %>% \n    slice_max(order_by = n, n = 3) %>% \n    select(prop) %>% \n    pull()\n```\n:::\n\n\n\n\n\nAfter removing 22 ineligible articles that we discovered during data documentation from the original 1,100 random articles, we analyzed 1,078 articles for our averaging analysis.\nWe recorded that 852 (66.8 ± 2.8%) reported some details of their data averaging methods.\nTime averages dominated in popularity (91.5%) (Table 2).\nBin averages proved the most widespread averaging subtype (89.9%) (Table 2).\nTogether, time-bin (86.8%) was the most frequent type-subtype averaging method combination.\n\n\n\n\n\n::: {#tbl-avg_type_subtype_tables .cell .tbl-cap-location-top layout-ncol=\"2\" tbl-cap='Averaging methods by type (a) and subtype (b).'}\n\n```{.r .cell-code .hidden}\navg_by_type_tab_formatted <- avg_by_type_tab %>% \n    mutate(prop = round(prop * 100, 1)) %>% \n    rename(\"Averaging Type\" = avg_type,\n           N = n,\n           \"%\" = prop) %>% \n    flextable::flextable()\n\navg_by_subtype_tab_formatted <- avg_by_subtype_tab %>% \n    mutate(prop = round(prop * 100, 1),\n          avg_subtype = if_else(avg_subtype == \"Fft\",\n                                \"Fast Fourier Transform\",\n                                avg_subtype)) %>% \n    rename(\"Averaging Subtype\" = avg_subtype,\n           N = n,\n           \"%\" = prop) %>% \n    arrange(desc(N)) %>% \n    flextable::flextable()\n\nflextable::save_as_docx(\n  avg_by_type_tab_formatted,\n  avg_by_subtype_tab_formatted,\n  path = here::here(\"graphics/avg_tables.docx\"))\n```\n:::\n\n\n\n\n\nWhen incorporating averaging amounts, 30-, 60-, 15-, and 10-second bin averages (Figure 3) were the most popular.\nThe \"other\" methods category accounted for the second highest share of the total, but this represents many rarely used averaging methods.\n\n\n\n\n\n::: {#cell-fig-avg_full_method_plot .cell}\n\n```{.r .cell-code .hidden}\n# plot(avg_by_full_method_plot)\n```\n:::\n\n\n\n\n# Discussion {#sec-discussion}\n\n## Summary of Evidence\n\nThis review shows that gas exchange data processing methods are infrequently reported for outlier removal and interpolation.\nWe consider outlier removal documentation important as it applies to many exercise test analyses.\nRemoving outliers is important to VO~2~ kinetics and similar research with rapid intensity changes because they rely on high temporal resolution.\nOutlier removal is also relevant for maximal exercise testing as outliers near the end of a test may influence VO~2~max or VO~2~peak.\nPrevious research indicates that a VO~2~max below the 20th percentile for age and sex increases the risk of all-cause mortality [@blair1995], so accurate determinations of VO~2~max are important for individuals with low cardiorespiratory fitness: an erroneous breath yielding an overestimated VO~2~max may subdue the urgency to improve cardiovascular health for low-fitness individuals.\n\nOutliers could also affect mathematical VO~2~ plateau determinations.\nSuch methods test if neighboring VO~2~ values or a VO~2~ vs. time slope does not change or increase by more than a set rate (e.g., 50 mL/min) at the end of a maximal test.\n[@robergs2001; @astorino2000; @myers1989; @myers1990; @yoon2007].\nThough data averaging dampens their influence, outliers present near the conclusion of a maximal test could plausibly interfere with mathematical VO~2~ plateau determination.\n\nWe are currently unaware of research that has tested this, but outliers may interfere with submaximal thresholds found using algorithms, especially if they exist near likely breakpoints.\nThreshold algorithms often fit piecewise linear regressions and solve for the lowest sums of squares [@jones1984; @beaver1986; @orr1982].\nPoints near the edges of the regression lines have more leverage when solving for the best-fit line and, therefore, are more likely to influence the slope or intercept.\nSuch changes could alter the intersection point of the piecewise regression, and thus, the threshold values.\n\nFinally, even fewer articles reported the outlier limit calculation function.\nAs the function chosen impacts calculated outlier limit, it also affects where values are considered outliers.\nWe are unaware of a recommended outlier removal function but encourage stating such details.\n\nWe find the low interpolation reporting more reasonable because this procedure is most relevant to less frequent VO~2~ kinetics studies.\nHowever, the V-slope method, one of the most common methods for determining the first ventilatory threshold, interpolates data in their original method [@beaver1986].\nImportantly, the V-slope algorithm is only part of the overall V-slope method, so it can be unclear if authors interpolated data when citing the V-slope method. Given this and the artificial confidence interval shrinkage, it may be prudent for future papers to specify interpolation or lack thereof.\n\nMost studies use one-second linear interpolation, but different time frames and styles, such as cubic interpolation, may yield different results.\nCubic spline interpolation produces a smooth curve but may slightly \"overshoot\" measured values [@zhang1997].\nThough likely small, we recommend authors specify the interpolation type.\n\nDespite a much higher percentage of papers describing at least some of their averaging methods, a third of studies examined in this review neglected to document their process.\nData averaging likely contributes more to the final calculated values of VO~2~max and other variables than do outlier removal and interpolation.\nIndeed, the research on the effect of interpolation on VO~2~ kinetics parameters shows that interpolation does not significantly affect the values of parameter estimates [@benson2017; @francescato2014; @francescato2019; @francescato2015].\nAlthough we are unaware of studies comparing the effect of outlier removal or leaving data as-is before proceeding with other calculations, the known impact of data averaging on VO~2~max and the inherent dampening effect of averaging on outliers itself suggests that data averaging is the most important of the three steps when the goal is to reflect the underlying whole-body metabolic rate.\nTherefore, researchers should state their gas exchange data averaging methods to improve research reproducibility and study comparisons.\n\nStating averaging methods can also help correctly classify cardiorespiratory fitness against normative data.\nResearch by @martin-rincon2020 offers a strategy to compare two VO~2~max values obtained with different averaging methods.\nWithout such corrections, one could misclassify cardiorespiratory fitness based on VO~2~max if VO~2~max were calculated with a sufficiently different sampling interval than that used to generate the normative data.\nImportantly, the normative data offered by the American College of Sports Medicine [@pescatello2014, table 4.9, pp. 88-93] is based on a regression of VO~2~ vs. time-to-exhaustion using a modified Balke protocol and equations developed from @pollock1982 and @pollock1976 (Cooper Institute, personal communication, 9/2021), rather than directly measured.\nThe system used create the regression for males [@pollock1976] and females [@pollock1982] averaged the data every minute and every 30-seconds, respectively.\nGiven that, stating the averaging methods used may allow for better comparisons to normative data.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nn_15_breath_roll <- avg_by_full_method_tab %>% \n    filter(avg_type == \"breath\" & avg_subtype == \"rolling\" & avg_amount == 15) %>% \n    select(n) %>% \n    pull()\n\nprop_15_breath_roll <- avg_by_full_method_tab %>% \n    filter(avg_type == \"breath\" & avg_subtype == \"rolling\" & avg_amount == 15) %>% \n    select(prop) %>% \n    pull()\n\nz <- qnorm(0.025, lower.tail = FALSE)\n\nmoe_15_br_rolling <- z * sqrt(\n    prop_15_breath_roll * (1 - prop_15_breath_roll) / \n        n_total_articles_avg)\n\nn_low_pass <- avg_by_full_method_tab %>% \n    filter(avg_type == \"digital filter\" & avg_subtype == \"butterworth low-pass\") %>% \n    select(n) %>% \n    pull()\n\nprop_low_pass <- avg_by_full_method_tab %>% \n    filter(avg_type == \"digital filter\" & avg_subtype == \"butterworth low-pass\") %>% \n    select(prop) %>% \n    pull()\n\nmoe_low_pass <- z * sqrt(\n    prop_low_pass * (1 - prop_low_pass) / \n        n_total_articles_avg)\n\ntop_three_full_method <- avg_by_full_method_tab %>% \n    slice_max(prop, n = 3) %>% \n    select(prop) %>% \n    pull()\n\navg_by_full_method_tab_condensed <- avg_by_full_method_tab %>% \n    mutate(avg_procedure = paste(\n        avg_type, avg_subtype, avg_amount, avg_mos, avg_mean_type, sep = \"-\"),\n        avg_procedure = if_else(prop < 0.01, \"Other\", str_to_title(avg_procedure))) %>% \n    group_by(avg_procedure) %>% \n    summarize(n = sum(n)) %>% \n    ungroup() %>% \n    mutate(prop = prop.table(n)) %>% \n    mutate(avg_procedure = str_remove(avg_procedure, \"-Mean-Whole\"),\n           avg_procedure = str_remove_all(avg_procedure, \"-Na\")) %>% \n    arrange(desc(prop))\n\ntop_three_full_method <- avg_by_full_method_tab_condensed %>% \n    slice_max(prop, n = 3) %>% \n    select(avg_procedure, prop) %>% \n    deframe()\n```\n:::\n\n\n\n\n\nThe most frequent fully specified data averaging method, the 30-second time average, fits maximum recommended guideline by Robergs [-@robergs2010].\n@robergs2010 also recommended the 15-breath rolling average or the low-pass digital filter, but we only documented these methods two (0.2 ±0.3%) and one (0.1 ±0.2%) times, respectively.\n\n## Limitations\n\nThis study presents the most extensive review of gas exchange data processing methods to date.\nHowever, due to its scope, not every article received a detailed examination, which means some data processing descriptions might have been missed due to the limitations of our RegExs, leading us to categorize these as \"not described.\" Articles that referred to previous works for their data processing techniques were also marked as \"not described\" for simplicity.\nWe realize authors must balance adequate methodological documentation with journal word or character limits.\nYet, methodological shortcut citations can mean missing details that prevent readers from fully reproducing the methods used [@standvoss2022].\nNext, by chance, we found rare examples of articles using the median as the measure of center as we built our RegExs.\nHowever, we did not document any such cases in our random sample.\nA larger sample would likely find these and other rare data averaging methods.\nFinally, it is possible that a few ineligible articles eluded our screening.\nTaken together, our results are not entirely comprehensive and may slightly underestimate data processing methods' true reporting frequency.\n\nAnother limitation of this scoping review is that our results do not indicate how different data processing methods were used.\nFor example, we did not distinguish if a 60-second time-bin average was used to calculate VO~2~max or a steady-state exercise period.\nTherefore, this review cannot estimate the prevalence of different processing methods for specific analyses, such as VO~2~max.\nNevertheless, this is the first study we know of to document data processing methods *besides* those used to calculate VO~2~max.\n\n## Conclusions\n\nThis scoping review found that data processing methods were seldom reported for outlier removal and interpolation, and that averaging reporting, though much higher, could further improve. The results reflect prevalent methods. While prevalence should not be conflated with quality, knowing the prevalent methods can allow others to test the influence data processing in this field by comparing relevant options. Finally, we hope these results motivate others to improve their methodological documentation and, thus, reproducibility in this field.\n\n# Funding {.unnumbered}\n\nWe have no funding sources to disclose.\n\n# Acknowledgments {.unnumbered}\n\nWe thank Scott Marsalis and Cody Hennesy from the University\nof Minnesota Libraries for their advice and support.\n\n# Conflict of Interest {.unnumbered}\n\nThe authors declare that they have no conflict of interest.\n\n# References {.unnumbered}\n\n::: {#refs}\n:::\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}